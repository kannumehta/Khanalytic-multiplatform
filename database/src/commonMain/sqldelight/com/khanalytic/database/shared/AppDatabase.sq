insertUser:
INSERT INTO User(id, email, name, authToken, isVerified)
 VALUES(?, ?, ?, ?, ?);

deleteAllUsers:
DELETE FROM User;

selectFirstUser:
SELECT User.* FROM User LIMIT 1;

selectUserById:
SELECT User.* FROM User WHERE id = :id;



upsertPlatform:
INSERT OR REPLACE INTO Platform (
    id,
    name,
    loginUrl,
    createdAt,
    updatedAt
) VALUES (?,?,?,?, ?);

selectAllPlatforms:
SELECT Platform.* FROM Platform;

selectPlatformById:
SELECT Platform.* FROM Platform WHERE id = :id;

lastSycnedPlatform:
SELECT * FROM Platform ORDER BY DATETIME(updatedAt) DESC, id DESC LIMIT 1;

insertUserPlatformCookie:
INSERT INTO UserPlatformCookie (
    userId,
    platformId,
    cookiesJson
) VALUES (?,?,?);

selectLastUserPlatform:
SELECT id FROM UserPlatformCookie ORDER BY id DESC LIMIT 1;

updateUserPlatformCookie:
UPDATE UserPlatformCookie
SET userId = :userId, platformId = :platformId, cookiesJson = :cookiesJson
WHERE id = :id;

selectUserPlatformCookieById:
SELECT UserPlatformCookie.* FROM UserPlatformCookie WHERE id = :id LIMIT 1;

selectUserPlatformCookiesByUser:
SELECT UserPlatformCookie.* FROM UserPlatformCookie WHERE userId = :userId;


upsetBrand:
INSERT OR REPLACE INTO Brand(id, name, address, latitude, longitude, createdAt, updatedAt)
 VALUES(?, ?, ?, ?, ?, ?, ?);

selectAllBrands:
SELECT Brand.*, PlatformBrand.* FROM Brand
INNER JOIN PlatformBrand ON PlatformBrand.brandId = Brand.id;

selectAllBrandsByCookieId:
SELECT Brand.*, PlatformBrand.* FROM Brand
INNER JOIN PlatformBrand ON PlatformBrand.brandId = Brand.id
WHERE userPlatformCookieId = :userPlatformCookieId;

lastSyncedBrand:
SELECT * FROM Brand ORDER BY DATETIME(updatedAt) DESC, id DESC LIMIT 1;


upsertPlatformBrand:
INSERT OR REPLACE INTO PlatformBrand (
    id,
    brandId,
    platformId,
    remoteBrandId,
    userPlatformCookieId
) VALUES (?, ?, ?, ?, ?);

upsertPlatformBrandWithoutCookie:
INSERT OR REPLACE INTO PlatformBrand (
    id,
    brandId,
    platformId,
    remoteBrandId
) VALUES (?, ?, ?, ?);

selectAllPlatformBrands:
SELECT PlatformBrand.* FROM PlatformBrand;

selectAllRemoteBrandIds:
SELECT PlatformBrand.remoteBrandId FROM PlatformBrand WHERE platformId = :platformId;

selectPlatformBrandsByCookieId:
SELECT PlatformBrand.* FROM PlatformBrand
WHERE PlatformBrand.userPlatformCookieId = :userPlatformCookieId;

selectPlatformBrandsWithCookies:
SELECT PlatformBrand.*, UserPlatformCookie.* FROM PlatformBrand
INNER JOIN UserPlatformCookie ON PlatformBrand.userPlatformCookieId = UserPlatformCookie.id
WHERE PlatformBrand.userPlatformCookieId IS NOT NULL;


selectPlatformSyncTimestamp:
SELECT PlatformSyncTimestamp.* FROM PlatformSyncTimestamp WHERE platformId = :platformId LIMIT 1;

upsertPlatformSyncTimestamp:
INSERT OR REPLACE INTO PlatformSyncTimestamp (
    platformId,
    lastSyncedAt
) VALUES (?, ?);